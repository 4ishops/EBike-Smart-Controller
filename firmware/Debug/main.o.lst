   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	myvectors
  19              		.section	vectors,"aw",%progbits
  20              		.align	2
  23              	myvectors:
  24 0000 00080020 		.word	536872960
  25 0004 00000000 		.word	main
  26 0008 00000000 		.word	nmi_handler
  27 000c 00000000 		.word	hardfault_handler
  28              		.comm	GPIO_InitStructure,4,4
  29              		.text
  30              		.align	2
  31              		.global	main
  32              		.thumb
  33              		.thumb_func
  35              	main:
  36              	.LFB0:
  37              		.file 1 "../main.c"
   1:../main.c     **** #include "stm32f10x_lib.h"
   2:../main.c     **** #include "stm32f10x_map.h"
   3:../main.c     **** #include "stm32f10x_rcc.h"
   4:../main.c     **** #include "stm32f10x_gpio.h"
   5:../main.c     **** #include "stm32f10x_usart.h"
   6:../main.c     **** #include "bits.h"
   7:../main.c     **** 
   8:../main.c     **** #define STACK_TOP 0x20000800
   9:../main.c     **** #define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))
  10:../main.c     **** //Declarations
  11:../main.c     **** void nmi_handler(void);
  12:../main.c     **** void hardfault_handler(void);
  13:../main.c     **** int main(void);
  14:../main.c     **** 
  15:../main.c     **** // Define the vector table
  16:../main.c     **** 	unsigned int * myvectors[4] 
  17:../main.c     ****      __attribute__ ((section("vectors")))= {
  18:../main.c     ****    	(unsigned int *)	0x20000800,	// stack pointer
  19:../main.c     ****    	(unsigned int *) 	main,		// code entry point
  20:../main.c     ****    	(unsigned int *)	nmi_handler,		// NMI handler (not really)
  21:../main.c     ****    	(unsigned int *)	hardfault_handler		// hard fault handler (let's hope not)
  22:../main.c     **** };
  23:../main.c     **** 
  24:../main.c     **** // VARIABLES
  25:../main.c     **** 
  26:../main.c     **** GPIO_InitTypeDef GPIO_InitStructure;
  27:../main.c     **** 
  28:../main.c     **** 
  29:../main.c     **** 
  30:../main.c     **** /*************************************************************************
  31:../main.c     ****  * Function Name: main
  32:../main.c     ****  * Parameters: none
  33:../main.c     ****  * Return: Int32U
  34:../main.c     ****  *
  35:../main.c     ****  * Description: The main subroutine
  36:../main.c     ****  *
  37:../main.c     ****  *************************************************************************/
  38:../main.c     **** int main(void)
  39:../main.c     **** {
  38              		.loc 1 39 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 0
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              	.LCFI1:
  49              		.cfi_def_cfa_register 7
  40:../main.c     **** 	
  41:../main.c     **** 		*NVIC_CCR = *NVIC_CCR | 0x200; /* Set STKALIGN in NVIC */
  50              		.loc 1 41 0
  51 0004 1E4B     		ldr	r3, .L3
  52 0006 1E4A     		ldr	r2, .L3
  53 0008 1268     		ldr	r2, [r2, #0]
  54 000a 42F40072 		orr	r2, r2, #512
  55 000e 1A60     		str	r2, [r3, #0]
  42:../main.c     **** 	// Init clock system
  43:../main.c     **** 	  Clk_Init();
  56              		.loc 1 43 0
  57 0010 FFF7FEFF 		bl	Clk_Init
  44:../main.c     **** 
  45:../main.c     **** 	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
  58              		.loc 1 45 0
  59 0014 4FF00100 		mov	r0, #1
  60 0018 4FF00101 		mov	r1, #1
  61 001c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  46:../main.c     ****       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);
  62              		.loc 1 46 0
  63 0020 4FF01400 		mov	r0, #20
  64 0024 4FF00101 		mov	r1, #1
  65 0028 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  47:../main.c     **** 					
  48:../main.c     **** 
  49:../main.c     **** 	        // Configure PC.12 as output push-pull (LED)
  50:../main.c     **** 	        GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
  66              		.loc 1 50 0
  67 002c 1548     		ldr	r0, .L3+4
  68 002e 4FF48051 		mov	r1, #4096
  69 0032 4FF00102 		mov	r2, #1
  70 0036 FFF7FEFF 		bl	GPIO_WriteBit
  51:../main.c     **** 	        GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
  71              		.loc 1 51 0
  72 003a 134B     		ldr	r3, .L3+8
  73 003c 4FF48052 		mov	r2, #4096
  74 0040 1A80     		strh	r2, [r3, #0]	@ movhi
  52:../main.c     **** 	        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  75              		.loc 1 52 0
  76 0042 114B     		ldr	r3, .L3+8
  77 0044 4FF01002 		mov	r2, #16
  78 0048 DA70     		strb	r2, [r3, #3]
  53:../main.c     **** 	        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  79              		.loc 1 53 0
  80 004a 0F4B     		ldr	r3, .L3+8
  81 004c 4FF00302 		mov	r2, #3
  82 0050 9A70     		strb	r2, [r3, #2]
  54:../main.c     **** 	        GPIO_Init(GPIOC, &GPIO_InitStructure);
  83              		.loc 1 54 0
  84 0052 0C48     		ldr	r0, .L3+4
  85 0054 0C49     		ldr	r1, .L3+8
  86 0056 FFF7FEFF 		bl	GPIO_Init
  87              	.L2:
  88              	.LBB2:
  55:../main.c     **** 
  56:../main.c     **** 
  57:../main.c     **** 	  while(1)
  58:../main.c     **** 		{
  59:../main.c     **** 		  
  60:../main.c     **** 	            GPIOC->BRR |= 0x00001000;
  89              		.loc 1 60 0 discriminator 1
  90 005a 0A4B     		ldr	r3, .L3+4
  91 005c 094A     		ldr	r2, .L3+4
  92 005e 5269     		ldr	r2, [r2, #20]
  93 0060 42F48052 		orr	r2, r2, #4096
  94 0064 5A61     		str	r2, [r3, #20]
  61:../main.c     **** 	            myDelay(500000);
  95              		.loc 1 61 0 discriminator 1
  96 0066 0948     		ldr	r0, .L3+12
  97 0068 FFF7FEFF 		bl	myDelay
  62:../main.c     **** 	            GPIOC->BSRR |= 0x00001000;
  98              		.loc 1 62 0 discriminator 1
  99 006c 054B     		ldr	r3, .L3+4
 100 006e 054A     		ldr	r2, .L3+4
 101 0070 1269     		ldr	r2, [r2, #16]
 102 0072 42F48052 		orr	r2, r2, #4096
 103 0076 1A61     		str	r2, [r3, #16]
  63:../main.c     **** 	            myDelay(500000);
 104              		.loc 1 63 0 discriminator 1
 105 0078 0448     		ldr	r0, .L3+12
 106 007a FFF7FEFF 		bl	myDelay
 107              	.LBE2:
  64:../main.c     **** 	         }
 108              		.loc 1 64 0 discriminator 1
 109 007e ECE7     		b	.L2
 110              	.L4:
 111              		.align	2
 112              	.L3:
 113 0080 14ED00E0 		.word	-536810220
 114 0084 00100140 		.word	1073811456
 115 0088 00000000 		.word	GPIO_InitStructure
 116 008c 20A10700 		.word	500000
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.align	2
 121              		.global	nmi_handler
 122              		.thumb
 123              		.thumb_func
 125              	nmi_handler:
 126              	.LFB1:
  65:../main.c     **** }
  66:../main.c     **** void nmi_handler(void)
  67:../main.c     **** {
 127              		.loc 1 67 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0090 80B4     		push	{r7}
 133              	.LCFI2:
 134              		.cfi_def_cfa_offset 4
 135              		.cfi_offset 7, -4
 136 0092 00AF     		add	r7, sp, #0
 137              	.LCFI3:
 138              		.cfi_def_cfa_register 7
  68:../main.c     **** 	return ;
 139              		.loc 1 68 0
 140 0094 00BF     		nop
  69:../main.c     **** }
 141              		.loc 1 69 0
 142 0096 BD46     		mov	sp, r7
 143 0098 80BC     		pop	{r7}
 144 009a 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE1:
 148              		.align	2
 149              		.global	hardfault_handler
 150              		.thumb
 151              		.thumb_func
 153              	hardfault_handler:
 154              	.LFB2:
  70:../main.c     **** 
  71:../main.c     **** void hardfault_handler(void)
  72:../main.c     **** {
 155              		.loc 1 72 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 009c 80B4     		push	{r7}
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 009e 00AF     		add	r7, sp, #0
 165              	.LCFI5:
 166              		.cfi_def_cfa_register 7
  73:../main.c     **** 	return ;
 167              		.loc 1 73 0
 168 00a0 00BF     		nop
  74:../main.c     **** }
 169              		.loc 1 74 0
 170 00a2 BD46     		mov	sp, r7
 171 00a4 80BC     		pop	{r7}
 172 00a6 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE2:
 176              		.align	2
 177              		.global	myDelay
 178              		.thumb
 179              		.thumb_func
 181              	myDelay:
 182              	.LFB3:
  75:../main.c     **** //Functions definitions
  76:../main.c     **** void myDelay(unsigned long delay )
  77:../main.c     **** { 
 183              		.loc 1 77 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188 00a8 80B4     		push	{r7}
 189              	.LCFI6:
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 7, -4
 192 00aa 83B0     		sub	sp, sp, #12
 193              	.LCFI7:
 194              		.cfi_def_cfa_offset 16
 195 00ac 00AF     		add	r7, sp, #0
 196              	.LCFI8:
 197              		.cfi_def_cfa_register 7
 198 00ae 7860     		str	r0, [r7, #4]
  78:../main.c     ****   while(delay) delay--;
 199              		.loc 1 78 0
 200 00b0 03E0     		b	.L10
 201              	.L11:
 202              		.loc 1 78 0 is_stmt 0 discriminator 2
 203 00b2 7B68     		ldr	r3, [r7, #4]
 204 00b4 03F1FF33 		add	r3, r3, #-1
 205 00b8 7B60     		str	r3, [r7, #4]
 206              	.L10:
 207              		.loc 1 78 0 discriminator 1
 208 00ba 7B68     		ldr	r3, [r7, #4]
 209 00bc 002B     		cmp	r3, #0
 210 00be F8D1     		bne	.L11
  79:../main.c     **** }
 211              		.loc 1 79 0 is_stmt 1
 212 00c0 07F10C07 		add	r7, r7, #12
 213 00c4 BD46     		mov	sp, r7
 214 00c6 80BC     		pop	{r7}
 215 00c8 7047     		bx	lr
 216              		.cfi_endproc
 217              	.LFE3:
 219 00ca 00BF     		.align	2
 220              		.global	Clk_Init
 221              		.thumb
 222              		.thumb_func
 224              	Clk_Init:
 225              	.LFB4:
  80:../main.c     **** 
  81:../main.c     **** /*************************************************************************
  82:../main.c     ****  * Function Name: Clk_Init
  83:../main.c     ****  * Parameters: Int32U Frequency
  84:../main.c     ****  * Return: Int32U
  85:../main.c     ****  *
  86:../main.c     ****  * Description: Init clock system
  87:../main.c     ****  *
  88:../main.c     ****  *************************************************************************/
  89:../main.c     **** 
  90:../main.c     **** void Clk_Init (void)
  91:../main.c     **** {
 226              		.loc 1 91 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 00cc 80B5     		push	{r7, lr}
 231              	.LCFI9:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 00ce 00AF     		add	r7, sp, #0
 236              	.LCFI10:
 237              		.cfi_def_cfa_register 7
  92:../main.c     ****   // 1. Cloking the controller from internal HSI RC (8 MHz)
  93:../main.c     ****   RCC_HSICmd(ENABLE);
 238              		.loc 1 93 0
 239 00d0 4FF00100 		mov	r0, #1
 240 00d4 FFF7FEFF 		bl	RCC_HSICmd
  94:../main.c     ****   // wait until the HSI is ready
  95:../main.c     ****   while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 241              		.loc 1 95 0
 242 00d8 00BF     		nop
 243              	.L13:
 244              		.loc 1 95 0 is_stmt 0 discriminator 1
 245 00da 4FF02000 		mov	r0, #32
 246 00de FFF7FEFF 		bl	RCC_GetFlagStatus
 247 00e2 0346     		mov	r3, r0
 248 00e4 002B     		cmp	r3, #0
 249 00e6 F8D0     		beq	.L13
  96:../main.c     ****   RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 250              		.loc 1 96 0 is_stmt 1
 251 00e8 4FF00000 		mov	r0, #0
 252 00ec FFF7FEFF 		bl	RCC_SYSCLKConfig
  97:../main.c     ****   // 2. Enable ext. high frequency OSC
  98:../main.c     ****   RCC_HSEConfig(RCC_HSE_ON);
 253              		.loc 1 98 0
 254 00f0 4FF48030 		mov	r0, #65536
 255 00f4 FFF7FEFF 		bl	RCC_HSEConfig
  99:../main.c     ****   // wait until the HSE is ready
 100:../main.c     ****   while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 256              		.loc 1 100 0
 257 00f8 00BF     		nop
 258              	.L14:
 259              		.loc 1 100 0 is_stmt 0 discriminator 1
 260 00fa 4FF03100 		mov	r0, #49
 261 00fe FFF7FEFF 		bl	RCC_GetFlagStatus
 262 0102 0346     		mov	r3, r0
 263 0104 002B     		cmp	r3, #0
 264 0106 F8D0     		beq	.L14
 101:../main.c     ****   // 3. Init PLL
 102:../main.c     ****   RCC_PLLConfig(RCC_PLLSource_HSE_Div1,RCC_PLLMul_9); // 72MHz
 265              		.loc 1 102 0 is_stmt 1
 266 0108 4FF48030 		mov	r0, #65536
 267 010c 4FF4E011 		mov	r1, #1835008
 268 0110 FFF7FEFF 		bl	RCC_PLLConfig
 103:../main.c     **** //  RCC_PLLConfig(RCC_PLLSource_HSE_Div2,RCC_PLLMul_9); // 72MHz
 104:../main.c     ****   RCC_PLLCmd(ENABLE);
 269              		.loc 1 104 0
 270 0114 4FF00100 		mov	r0, #1
 271 0118 FFF7FEFF 		bl	RCC_PLLCmd
 105:../main.c     ****   // wait until the PLL is ready
 106:../main.c     ****   while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 272              		.loc 1 106 0
 273 011c 00BF     		nop
 274              	.L15:
 275              		.loc 1 106 0 is_stmt 0 discriminator 1
 276 011e 4FF03900 		mov	r0, #57
 277 0122 FFF7FEFF 		bl	RCC_GetFlagStatus
 278 0126 0346     		mov	r3, r0
 279 0128 002B     		cmp	r3, #0
 280 012a F8D0     		beq	.L15
 107:../main.c     ****   // 4. Set system clock divders
 108:../main.c     ****   RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 281              		.loc 1 108 0 is_stmt 1
 282 012c 4FF00000 		mov	r0, #0
 283 0130 FFF7FEFF 		bl	RCC_USBCLKConfig
 109:../main.c     ****   RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 284              		.loc 1 109 0
 285 0134 4FF44040 		mov	r0, #49152
 286 0138 FFF7FEFF 		bl	RCC_ADCCLKConfig
 110:../main.c     ****   RCC_PCLK2Config(RCC_HCLK_Div1);
 287              		.loc 1 110 0
 288 013c 4FF00000 		mov	r0, #0
 289 0140 FFF7FEFF 		bl	RCC_PCLK2Config
 111:../main.c     ****   RCC_PCLK1Config(RCC_HCLK_Div2);
 290              		.loc 1 111 0
 291 0144 4FF48060 		mov	r0, #1024
 292 0148 FFF7FEFF 		bl	RCC_PCLK1Config
 112:../main.c     ****   RCC_HCLKConfig(RCC_SYSCLK_Div1);
 293              		.loc 1 112 0
 294 014c 4FF00000 		mov	r0, #0
 295 0150 FFF7FEFF 		bl	RCC_HCLKConfig
 113:../main.c     ****   // Flash 1 wait state 
 114:../main.c     ****   *(vu32 *)0x40022000 = 0x12;
 296              		.loc 1 114 0
 297 0154 044B     		ldr	r3, .L16
 298 0156 4FF01202 		mov	r2, #18
 299 015a 1A60     		str	r2, [r3, #0]
 115:../main.c     ****   // 5. Clock system from PLL
 116:../main.c     ****   RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 300              		.loc 1 116 0
 301 015c 4FF00200 		mov	r0, #2
 302 0160 FFF7FEFF 		bl	RCC_SYSCLKConfig
 117:../main.c     **** }
 303              		.loc 1 117 0
 304 0164 80BD     		pop	{r7, pc}
 305              	.L17:
 306 0166 00BF     		.align	2
 307              	.L16:
 308 0168 00200240 		.word	1073881088
 309              		.cfi_endproc
 310              	.LFE4:
 312              	.Letext0:
 313              		.file 2 "../stm32f10x_type.h"
 314              		.file 3 "../stm32f10x_map.h"
 315              		.file 4 "../stm32f10x_gpio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccoJXL0J.s:23     vectors:00000000 myvectors
     /tmp/ccoJXL0J.s:20     vectors:00000000 $d
     /tmp/ccoJXL0J.s:35     .text:00000000 main
     /tmp/ccoJXL0J.s:125    .text:00000090 nmi_handler
     /tmp/ccoJXL0J.s:153    .text:0000009c hardfault_handler
                            *COM*:00000004 GPIO_InitStructure
     /tmp/ccoJXL0J.s:30     .text:00000000 $t
     /tmp/ccoJXL0J.s:224    .text:000000cc Clk_Init
     /tmp/ccoJXL0J.s:181    .text:000000a8 myDelay
     /tmp/ccoJXL0J.s:113    .text:00000080 $d
     /tmp/ccoJXL0J.s:120    .text:00000090 $t
     /tmp/ccoJXL0J.s:308    .text:00000168 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1cb18d77ce4a2b8461ab48417a33beea
                           .group:00000000 wm4.stm32f10x_map.h.23.e32c5bc169f5bca8263a343c3fb0f58f
                           .group:00000000 wm4.stm32f10x_conf.h.21.0d3cf2f2cbb2da4df12e2aab87a9dc0c
                           .group:00000000 wm4.stm32f10x_type.h.23.e380307898cc9efdccdef16060239333
                           .group:00000000 wm4.stm32f10x_map.h.199.b8a24be375f3263e6b0ddcd78767d1fd
                           .group:00000000 wm4.stm32f10x_gpio.h.23.fabf5a60683ec591ac71577a88553371
                           .group:00000000 wm4.stm32f10x_rcc.h.23.9c9056daedc5033ab222aac206d83565
                           .group:00000000 wm4.stm32f10x_usart.h.23.88347cabf822904ef3b00c9e587ed386
                           .group:00000000 wm4.bits.h.3.63048c6f16946ff28df0690d77e9bd2e

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_WriteBit
GPIO_Init
RCC_HSICmd
RCC_GetFlagStatus
RCC_SYSCLKConfig
RCC_HSEConfig
RCC_PLLConfig
RCC_PLLCmd
RCC_USBCLKConfig
RCC_ADCCLKConfig
RCC_PCLK2Config
RCC_PCLK1Config
RCC_HCLKConfig
